# -*- coding: utf-8 -*-
"""Despigment_drugs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mUR26Bjc-2cymyBIS9G8qLajTGV5oNfA

Setting the enviorment
"""

!pip install pandas numpy matplotlib seaborn

!pip install rdkit

!pip install tqdm useful_rdkit_utils seaborn scikit-posthocs chembl_downloader chembl_webresource_client pubchempy

# Data manipulation and numerical computing
import pandas as pd
import numpy as np
import os

# Data visualization
import matplotlib.pyplot as plt
import seaborn as sns

# RDKit for cheminformatics
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem import rdMolDescriptors
from rdkit.Chem import Descriptors
from rdkit.Chem import PandasTools
from rdkit.Chem import FilterCatalog
from rdkit.Chem.FilterCatalog import FilterCatalogParams
from rdkit.Chem import AllChem
from rdkit.DataStructs import TanimotoSimilarity

# ChEMBL web resource client
from chembl_webresource_client.new_client import new_client

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/Colab Notebooks/Quimioinformatica'
os.chdir(path)

"""a. Filter invalid molecules"""

df_drugs= pd.read_csv("gen_mols_1.csv", sep=",", dtype=str, comment='#')
df_drugs

def smiles_to_mol(smiles):
    try:
        mol = Chem.MolFromSmiles(smiles)
        return mol
    except:
        return None

print(df_drugs.columns)

# Invalid Molecules
df_drugs['Mol'] = df_drugs['SMILES'].apply(smiles_to_mol)
df_drugs = df_drugs[df_drugs['Mol'].notna()].copy()
df_drugs

print("SMILES v√°lidos:", len(df_drugs))

"""b. Filter of 100 molecules based on Score, QED , Synthetic Accessibility"""

df_drugs['SA_norm'] = 10 - df_drugs['SA score'].astype(float)

df_drugs['combo_score'] = (
    0.5 * df_drugs['Score'].astype(float) +
    0.6 * df_drugs['QED'].astype(float) +
    0.4 * df_drugs['SA_norm']
)

df_top = df_drugs.sort_values('combo_score', ascending=False).head(100)
df_top

df_top2 = df_top[['SMILES','Mol']].dropna().drop_duplicates()
df_top2

"""c. Filter by Drug-Likeness"""

def drug_likness_decriptors(df_top2):

    pd.options.mode.chained_assignment = None

    NumHDonors_list = []
    NumHAcceptors_list = []
    MW_list = []
    LogP_list = []
    rotatable_bonds_list = []

    for element in df_top2['Mol']:
        try:
            NumHDonors = Descriptors.NumHDonors(element)
            NumHDonors_list.append(NumHDonors)
        except:
            NumHDonors_list.append('N/A')
            pass

        try:
            NumHAcceptors = Descriptors.NumHAcceptors(element)
            NumHAcceptors_list.append(NumHAcceptors)
        except:
            NumHAcceptors_list.append('N/A')
            pass

        try:
            # Calcular el peso molecular exacto
            MW = Descriptors.ExactMolWt(element)
            MW_list.append(MW)
        except:
            MW_list.append('N/A')
            pass

        try:
            # Calcular el logP
            LogP = Descriptors.MolLogP(element)
            LogP_list.append(LogP)
        except:
            LogP_list.append('N/A')
            pass

        try:
            rotatable_bonds = Descriptors.NumRotatableBonds(element)
            rotatable_bonds_list.append(rotatable_bonds)
        except:
            rotatable_bonds_list.append('N/A')
            pass

    df_top2['HBD'] = NumHDonors_list
    df_top2['HBA'] = NumHAcceptors_list
    df_top2['MW'] = MW_list
    df_top2['logP'] = LogP_list
    df_top2['nRotB'] = rotatable_bonds_list

    return df_top2

df_with_props = drug_likness_decriptors(df_top2)
df_with_props

def filter_lipinski(df_with_props):
    filtered = df_with_props[
        (df_top2['HBD'] <= 5) &
        (df_top2['HBA'] <= 10) &
        (df_top2['MW'] <= 500) &
        (df_top2['logP'] <= 5)
    ]
    return filtered

df_filtered = filter_lipinski(df_with_props)
df_filtered

"""d. Remove reactive/toxic compounds"""

params = FilterCatalogParams()
params.AddCatalog(FilterCatalogParams.FilterCatalogs.PAINS)
catalog = FilterCatalog.FilterCatalog(params)

def is_reactive_or_toxic(mol):
    entry = catalog.GetFirstMatch(mol)
    return entry is not None

df_filtered['is_reactive_or_toxic'] = df_filtered['Mol'].apply(is_reactive_or_toxic)
df_filtered_clean = df_filtered[~df_filtered['is_reactive_or_toxic']].copy()

print(f"Removed {df_filtered['is_reactive_or_toxic'].sum()} reactive/toxic compounds")

top10 = df_filtered.sort_values(by='logP').head(10)
top10

top10.to_csv("druglike_molecules.csv", index=False)

"""e. Visualize Top 10 Molecules"""

top10["Mol"] = top10["SMILES"].apply(lambda x: Chem.MolFromSmiles(x))

svg = Draw.MolsToGridImage(
    top10['Mol'].iloc[:20].tolist(),
    molsPerRow=5,
    subImgSize=(200, 200),
    useSVG=True
)

display(svg)

# Guardar en archivo .svg
with open("top10_molecules.svg", "w") as f:
    f.write(str(svg.data))

"""f. Structural Novelty"""

df_generated = pd.read_csv("druglike_molecules.csv")
df_fda = pd.read_csv("FDA_Drugs.csv")

gen_mols = [Chem.MolFromSmiles(smi) for smi in df_generated['SMILES']]
fda_mols = [Chem.MolFromSmiles(smi) for smi in df_fda['SMILES']]

gen_fps = [AllChem.GetMorganFingerprintAsBitVect(mol, 2) for mol in gen_mols]
fda_fps = [AllChem.GetMorganFingerprintAsBitVect(mol, 2) for mol in fda_mols]

max_tanimotos = []
for gen_fp in gen_fps:
    scores = [TanimotoSimilarity(gen_fp, fda_fp) for fda_fp in fda_fps]
    max_tanimotos.append(max(scores))

df_generated['max_tanimoto_vs_fda'] = max_tanimotos
df_novel = df_generated[df_generated['max_tanimoto_vs_fda'] < 0.4]

df_novel